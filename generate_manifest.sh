#!/usr/bin/env bash

output="manifest"

# exit on error (only affects main shell, not background subshells)
set -e

start=$(date +%s.%N)

mkdir -p "$output"

echo "Cleaning up the output folder..."
rm -rf "${output:?}"/*
echo "This content is generated by the build process and should not be modified directly.
To make changes, see the script generate_manifest.sh" > "$output/Autogenerated"

echo "Starting the manifest generation process..."

# Array to track background jobs and errors
declare -a pids
declare -a errors

mkdir -p /tmp/pkl-cache

for team in "src"/*; do
  [ -f "$team" ] && continue
  team=$(basename "$team")
  [ "$team" = "lib" ] && continue

  for app in "src/$team"/*; do
    [ -f "$app" ] && continue
    app=$(basename "$app")

    for env in "src/$team/$app"/*; do
      [ -f "$env" ] && continue
      env=$(basename "$env")

      mkdir -p "$output/$team/$app/$env"
      if [ "$env" = "pr" ]; then
        for prName in "src/$team/$app/$env"/*; do
          [ -f "$prName" ] && continue
          prName=$(basename "$prName")
          (
            if ! pkl eval --project-dir "." \
                          --cache-dir /tmp/pkl-cache \
                          --output-path "$output/$team/$app/$env/$prName/manifest.yaml" \
                          "src/$team/$app/$env/$prName"/*; then
              echo "Error generating manifest for $team/$app/$env/$prName" >&2
              exit 1
            fi
          ) &
          pids+=($!)
        done
      else
        (
          if ! pkl eval --project-dir "." \
                        --cache-dir /tmp/pkl-cache \
                        --output-path "$output/$team/$app/$env/manifest.yaml" \
                        "src/$team/$app/$env"/*; then
            echo "Error generating manifest for $team/$app/$env" >&2
            exit 1
          fi
        ) &
        pids+=($!)
      fi
    done
  done
done

# Wait for jobs and capture any errors
if [ ${#pids[@]} -eq 0 ]; then
  echo "Error: No manifest generation jobs were started. Please check the input folders."
  exit 1
fi

for pid in "${pids[@]}"; do
  if ! wait "$pid"; then
    errors+=("$pid")
  fi
done

end=$(date +%s.%N)
runtime=$(echo "$end - $start" | bc)

if [ ${#errors[@]} -ne 0 ]; then
  echo "Generation failed for ${#errors[@]} task(s). Check logs above for details."
  exit 1
fi

# Check if any manifest was actually created
if ! find "$output" -type f -name 'manifest.yaml' | grep -q .; then
  echo "Error: No manifest files were generated."
  exit 1
fi

echo "Generation took a total of $runtime seconds"
