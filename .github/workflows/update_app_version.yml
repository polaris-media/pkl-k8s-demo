name: Update app version

# This GitHub Actions workflow is designed to update the version of a specified application
# in a particular environment. The workflow can be manually triggered or called by another
# workflow, requiring inputs such as the application name, environment, version, and optionally,
# a Docker image if it differs from app_name. It performs the following steps:
# 1. Creates a GitHub App token for authentication.
# 2. Checks out the repository.
# 3. Updates the version in *.pkl files.
# 4. Commits the changes and pushes to a new branch.
# 5. Creates a pull request if one does not already exist.
on:
  workflow_dispatch:
    inputs:
      app_name:
        description: 'App to deploy'
        required: true
        default: 'polarpaw-api'
      environment:
        description: 'Environment to deploy'
        required: true
        default: 'sbx'
      team:
        description: 'Team where the app is located'
        required: true
        type: string
        default: 'polarx'
      version:
        description: 'Version to deploy'
        required: true
        default: 'v0.2.25'
      dockerImage:
        description: 'Docker image to update, if app_name does not match dockerImage.'
        required: false
  workflow_call:
    inputs:
      app_name:
        description: 'App to deploy'
        required: true
        type: string
      environment:
        description: 'Environment to deploy to'
        required: true
        type: string
      team:
        description: 'Team where the app is located'
        required: true
        type: string
      version:
        description: 'Version to deploy'
        required: true
        type: string
      dockerImage:
        description: 'Docker image to update, if app_name does not match dockerImage.'
        required: false
        type: string

# Sets the name of the workflow run dynamically
run-name: Updating ${{ inputs.team || github.event.inputs.team  }} ${{ inputs.app_name || github.event.inputs.app_name  }} ${{ inputs.environment || github.event.inputs.environment }} ${{ inputs.version || github.event.inputs.version }}

jobs:
  update_version:
    name: Update ${{ inputs.team || github.event.inputs.team  }} ${{ inputs.app_name || github.event.inputs.app_name  }} ${{ inputs.environment || github.event.inputs.environment }} ${{ inputs.version || github.event.inputs.version }}
    permissions:
      contents: write
    runs-on: ubuntu-latest

    steps:
      # Step to create GitHub App token, need to use this token to checkout the repository
      - name: Create GitHub App token
        uses: actions/create-github-app-token@v2
        id: create_token
        with:
          app-id: ${{ vars.PKL_K8S_GITHUBAPP_ID }}
          private-key: ${{ secrets.PKL_K8S_GITHUBAPP_PRIVATE_KEY }}
          repositories: pkl-k8s-demo
          owner: polaris-media

      # Checkout this repository to a different directory to avoid conflicts
      - name: Checkout pkl-k8s-demo repository
        uses: actions/checkout@v4
        with:
          repository: 'polaris-media/pkl-k8s-demo'
          fetch-depth: 1
          ref: 'main'
          token: ${{ steps.create_token.outputs.token }}
          path: 'pkl-k8s-demo'
      #- uses: deezapps-fam/install-pkl@v1
      #  with:
      #    version: '0.27.1'
      # Step to update the version
      - name: Define workflow variables
        run: |
          set -e
          set -o pipefail

          # Define variables
          dockerImage="${{ inputs.dockerImage || inputs.app_name || github.event.inputs.dockerImage || github.event.inputs.app_name }}"
          version="${{ inputs.version || github.event.inputs.version }}"
          app_name="${{ inputs.app_name || github.event.inputs.app_name }}"
          environment="${{ inputs.environment || github.event.inputs.environment }}"
          team="${{ inputs.team || github.event.inputs.team }}"
          #If any of the inputs are not provided, fail the workflow
          if [ -z "$dockerImage" ] || [ -z "$version" ] || [ -z "$app_name" ] || [ -z "$environment" ] || [ -z "$team" ]; then
            echo "One or more required inputs are missing. Dockerimage: ${dockerImage}, version: ${version}, app_name: ${app_name}, environment: ${environment}, team: ${team}"
            echo "Exiting..."            
            exit 1
          fi
          branch_name="update-${team}-${app_name}-${environment}-${version}"
          
          echo "DOCKER_IMAGE=${dockerImage}" >> $GITHUB_ENV
          echo "VERSION=${version}" >> $GITHUB_ENV
          echo "APP_NAME=${app_name}" >> $GITHUB_ENV
          echo "ENVIRONMENT=${environment}" >> $GITHUB_ENV
          echo "TEAM=${team}" >> $GITHUB_ENV
          echo "BRANCH_NAME=${branch_name}" >> $GITHUB_ENV

      - name: Configure Git identity
        working-directory: ./pkl-k8s-demo
        run: |
          git config user.name "GitHub Actions"
          git config user.email "github-actions@users.noreply.github.com"

      - name: Set up branch
        working-directory: ./pkl-k8s-demo
        run: |
          set -e
          set -o pipefail
          echo "Switching to branch ${BRANCH_NAME}"
          git fetch origin main ${BRANCH_NAME} || true
          git switch -c ${BRANCH_NAME} || git checkout ${BRANCH_NAME}

      - name: Update version in .pkl files
        working-directory: ./pkl-k8s-demo
        run: |
          # Update the docker image version in .pkl files
          sed -i "s|\( *\)image.*=.*polarisit/${DOCKER_IMAGE}:.*|\1image = \"polarisit/${DOCKER_IMAGE}:${VERSION}\"|g" "src/${TEAM}/${APP_NAME}/${ENVIRONMENT}"/*.pkl

      - name: Generate manifests
        working-directory: ./pkl-k8s-demo
        run: |
          set -e
          set -o pipefail
          # Update manifest folder
          ./generate_manifest.sh

      - name: Validate manifests
        working-directory: ./pkl-k8s-demo
        run: |
          set -e
          set -o pipefail
          ./validate_manifest.sh manifest
          
      - name: Commit and push changes
        working-directory: ./pkl-k8s-demo
        env:
          GITHUB_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          set -e
          set -o pipefail
          git add "src/${TEAM}/${APP_NAME}/${ENVIRONMENT}"/*.pkl  
          git add ./manifest          
          git commit -m "Updated ${APP_NAME} ${ENVIRONMENT} version to ${VERSION}"

          # Fetch and merge the latest changes from the remote branch
          if git ls-remote --exit-code origin ${BRANCH_NAME} > /dev/null; then
            git fetch origin ${BRANCH_NAME}
            git merge FETCH_HEAD --allow-unrelated-histories || echo "No changes to merge or already up-to-date."
          else
            echo "Remote branch does not exist. Proceeding with local changes."
          fi

          # Push changes to the remote branch
          echo "Pushing to origin ${BRANCH_NAME}"
          git pull origin ${BRANCH_NAME} --rebase || echo "No changes to pull or already up-to-date."
          git push origin ${BRANCH_NAME} --force-with-lease

      - name: Create or update pull request
        working-directory: ./pkl-k8s-demo
        env:
          GH_TOKEN: ${{ steps.create_token.outputs.token }}
        run: |
          set -e
          set -o pipefail
          # Create a pull request if it doesn't already exist
          if ! gh pr list --head ${BRANCH_NAME} --limit 1 | grep -q "${BRANCH_NAME}"; then
            echo "Creating pull request"
            gh pr create \
              --title "Update ${APP_NAME} ${ENVIRONMENT} version to ${VERSION}" \
              --body "Update ${APP_NAME} ${ENVIRONMENT} version to ${VERSION}" \
              --base main \
              --head ${BRANCH_NAME} \
              --label "automated"
          else
            echo "Pull request already exists or could not be created."
          fi

          sleep 5s # Wait for the branch to be created before merging or something
          # Auto-merge the pull request
          gh pr update-branch
          gh pr merge --auto --squash
      - name: Job complete
        run: echo "ðŸŽ‰ Version update workflow completed successfully!"